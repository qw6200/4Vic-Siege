{"version":3,"sources":["components/MainTable.jsx","components/TopTab.jsx","App.js","serviceWorker.js","index.js"],"names":["MainTable","props","handleSort","clickedColumn","state","column","data","direction","setState","reverse","_","sortBy","endpoints","i","fetch","this","headers","Headers","then","res","json","id","ubisoft_id","name","username","ranked_kd","seasons","shifting_tides","regions","ncsa","kills","deaths","ranked_wp","wins","losses","games_played","current_mmr","mmr","current_rank","rank_text","rank_svg","rank_image","length","sortData","sanitizeData","catch","console","log","getPlayerData","isNaN","newData","slice","reverseData","round","percentage","toFixed","position","Label","as","color","image","Icon","size","ign","Table","celled","sortable","fixed","basic","selectable","Header","Row","HeaderCell","sorted","onClick","Body","map","player","index","key","Cell","Image","src","rounded","Content","Subheader","renderName","renderTag","displayRank","React","Component","panes","menuItem","icon","content","render","Tab","Pane","attached","TopTab","menu","pointing","inverted","App","className","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e153d43e.chunk.js","sourcesContent":["import React from 'react';\nimport { Table, Label, Icon, Header, Image } from 'semantic-ui-react'\nimport './MainTable.css';\nimport _ from 'lodash'\n\nclass MainTable extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      endpoints: [\n        'https://api2.r6stats.com/public-api/stats/CubeheadCC/pc/seasonal',\n        'https://api2.r6stats.com/public-api/stats/dannykimbaby/pc/seasonal',\n        'https://api2.r6stats.com/public-api/stats/ALSJAE/pc/seasonal',\n        'https://api2.r6stats.com/public-api/stats/JacobsLeftNut/pc/seasonal',\n        'https://api2.r6stats.com/public-api/stats/Sangxue/pc/seasonal',\n      ],\n      data: [],\n      column: null,\n      direction: 'descending',\n    }\n  }\n\n  getPlayerData() {\n    for (let i = 0; i <= 5; i++) {\n      fetch(this.state.endpoints[i], {\n        headers: new Headers({\n          // eslint-disable-next-line no-useless-concat\n          'Authorization': 'Bearer ' + 'f889606e-8bc5-4f1c-b941-084aefd16a90',\n        })\n      })\n        .then(res => res.json())\n        .then((data) => {\n          this.setState({\n            data:\n              [...this.state.data, {\n                id: data.ubisoft_id,\n                name: data.username,\n                ranked_kd: (data.seasons.shifting_tides.regions.ncsa[0].kills) / (data.seasons.shifting_tides.regions.ncsa[0].deaths),\n                ranked_wp: (data.seasons.shifting_tides.regions.ncsa[0].wins / (data.seasons.shifting_tides.regions.ncsa[0].wins + data.seasons.shifting_tides.regions.ncsa[0].losses)) * 100,\n                games_played: (data.seasons.shifting_tides.regions.ncsa[0].wins + data.seasons.shifting_tides.regions.ncsa[0].losses),\n                current_mmr: data.seasons.shifting_tides.regions.ncsa[0].mmr,\n                current_rank: data.seasons.shifting_tides.regions.ncsa[0].rank_text,\n                rank_svg: data.seasons.shifting_tides.regions.ncsa[0].rank_image,\n              }]\n          });\n          if (this.state.data.length > 4) {\n            this.sortData();\n            this.sanitizeData();\n          }\n        })\n        .catch(console.log)\n    }\n  }\n  componentDidMount() {\n    this.getPlayerData();\n  }\n\n  sanitizeData() {\n    const { data } = this.state;\n    for (let i = 0; i <= 5; i++) {\n      let ranked_kd = data[i].ranked_kd;\n      let ranked_wp = data[i].ranked_wp;\n      let current_mmr = data[i].current_mmr;\n      if (isNaN(ranked_kd)) {\n        let newData = data.slice();\n        newData[i].ranked_kd = 'Unranked';\n        this.setState({ data: newData })\n      }\n      if (isNaN(ranked_wp)) {\n        let newData = data.slice();\n        newData[i].ranked_wp = 'Unranked';\n        this.setState({ data: newData })\n      }\n      if (current_mmr === 2500) {\n        let newData = data.slice();\n        newData[i].current_mmr = 'Unranked';\n        this.setState({ data: newData })\n      }\n    }\n  }\n\n  sortData() {\n    const { data } = this.state;\n    this.setState({\n      column: 'current_mmr',\n      data: _.sortBy(data, ['current_mmr']),\n      direction: 'descending',\n    });\n    this.reverseData();\n  }\n\n  reverseData() {\n    const { data } = this.state;\n    this.setState({\n      data: data.reverse()\n    });\n  }\n\n  displayRank(column, round, percentage) {\n    if (percentage && column !== 'Unranked') {\n      return column.toFixed(round) + '%';\n    } else {\n      return column === 'Unranked' ? 'Unranked' : column.toFixed(round);\n    }\n  }\n\n  handleSort = (clickedColumn) => () => {\n    const { column, data, direction } = this.state;\n    if (column !== clickedColumn) {\n      this.setState({\n        column: clickedColumn,\n        data: _.sortBy(data, [clickedColumn]),\n        direction: 'descending',\n      })\n      return\n    }\n\n    this.setState({\n      data: data.reverse(),\n      direction: direction === 'descending' ? 'ascending' : 'descending',\n    })\n  }\n\n  renderTag(position) {\n    switch (position) {\n      case 0:\n        return (\n          <Label as='a' color='blue' image>\n            <Icon name='chess king' size='large' />\n            King of the North\n        </Label>\n        )\n      case 1:\n        return (\n          <Label as='a' color='teal' image>\n            <Icon name='trophy' size='large' />\n            Renowned Player\n        </Label>\n        )\n      case 2:\n        return (\n          <Label as='a' color='green' image>\n            <Icon name='star' size='large' />\n            Respectable Soldier\n        </Label>\n        )\n      case 3:\n        return (\n          <Label as='a' color='orange' image>\n            <Icon name='handicap' size='large' />\n            Handicapped Player\n        </Label>\n        )\n      case 4:\n        return (\n          <Label as='a' color='red' image>\n            <Icon name='blind' size='large' />\n            Jot-Bap Sekki\n        </Label>\n        )\n      default:\n        return null;\n    }\n  }\n  \n  renderName(ign) {\n    switch (ign) {\n      case 'CubeheadCC':\n        return 'Jacob Lee';\n      case 'dannykimbaby':\n        return 'Daniel Kim';\n      case 'ALSJAE':\n        return 'Minjae Cho';\n      case 'Sangxue':\n        return 'Shane Cho';\n      case 'JacobsLeftNut':\n        return 'Chris Choi';\n      default:\n        return 'Unknown Player';\n    }\n  }\n  render() {\n    const { data, column, direction } = this.state;\n    return (\n      <Table celled sortable fixed basic='very' selectable>\n        <Table.Header>\n          <Table.Row>\n            <Table.HeaderCell>IGN</Table.HeaderCell>\n            <Table.HeaderCell>Player</Table.HeaderCell>\n            <Table.HeaderCell>Ranked KD</Table.HeaderCell>\n            <Table.HeaderCell>Ranked W/L</Table.HeaderCell>\n            <Table.HeaderCell>Games Played</Table.HeaderCell>\n            <Table.HeaderCell\n              sorted={column === 'current_mmr' ? direction : null}\n              onClick={this.handleSort('current_mmr')}\n            >\n              Current MMR\n            </Table.HeaderCell>\n          </Table.Row>\n        </Table.Header>\n        <Table.Body>\n          {data.map((player, index) => (\n            <Table.Row key={player.id}>\n              <Table.Cell>\n                <Header as='h3' image>\n                  <Image src={player.rank_svg} rounded size='tiny' />\n                  <Header.Content>\n                    {player.name}\n                    <Header.Subheader>{player.current_rank}</Header.Subheader>\n                  </Header.Content>\n                </Header>\n              </Table.Cell>\n              <Table.Cell>\n                {this.renderName(player.name)}\n                {this.renderTag(index)}\n              </Table.Cell>\n              <Table.Cell>\n                {this.displayRank(player.ranked_kd, 2)}\n              </Table.Cell>\n              <Table.Cell>\n                {this.displayRank(player.ranked_wp, 0, true)}\n              </Table.Cell>\n              <Table.Cell>{player.games_played}</Table.Cell>\n              <Table.Cell>{this.displayRank(player.current_mmr)}</Table.Cell>\n            </Table.Row>\n          ))}\n        </Table.Body>\n      </Table>\n    );\n  }\n}\n\nexport default MainTable;","import React from 'react'\nimport { Tab } from 'semantic-ui-react'\nimport MainTable from './MainTable';\nimport './TopTab.css';\n\nconst panes = [\n  {\n    menuItem: {key: 'members', icon: 'users', content: '4Vic Members'},\n    render: () => <Tab.Pane attached={false}><MainTable></MainTable></Tab.Pane>,\n  },\n]\n\nconst TopTab = () => \n  <Tab \n    menu={{ pointing: true, color: 'blue', inverted: true }} \n    panes={panes} \n  />\n\nexport default TopTab\n","import React from 'react';\nimport MainTable from './components/MainTable';\nimport TopTab from './components/TopTab';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TopTab>\n        <MainTable></MainTable>\n      </TopTab>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}